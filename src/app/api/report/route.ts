import { NextResponse } from 'next/server';
import PDFDocument from "pdfkit";
import { PassThrough } from "stream";

export async function GET() {

 // Create empty PDF document
  const doc = new PDFDocument({ size: "A4", margin: 50 });

  
  const stream = new PassThrough();
  const chunk: Uint8Array[] = [];
  
    doc.on("data", (data) => {
        chunk.push(data);}
    );

    doc.on("end", () => {
        stream.end(Buffer.concat(chunk));
    });

    // Header
    doc.fontSize(20).text("ðŸš€ Next.js Job-Ready Report", { align: "center" });
    doc.moveDown();

    // Content
    doc.fontSize(12).text("This PDF was generated server-side with pdfkit.", {
        align: "left",
    });

    doc.moveDown().text("Key Features:", { underline: true });
    doc.list([
        "Server-side rendering with API routes",
        "Dynamic report generation",
        "Downloadable PDF via client",
        "Job-ready boilerplate",
    ]);

    // Footer
    doc.moveDown(2).fontSize(10).text("Generated by Roth's Next.js app", {
        align: "center",
    });

    doc.end();


  //doc.pipe(stream);


  
  /* return new NextResponse(stream, {
    headers: {
      "Content-Type": "application/pdf",
      "Content-Disposition": "attachment; filename=report.pdf",
    },
  }); */
}


export async function POST(req: Request) {
    try {
        const { propertyId, startDate, endDate, metrics, dimensions } = await req.json();

        if (!propertyId || !startDate || !endDate || !metrics) {
            return NextResponse.json({ error: 'Missing required parameters' }, { status: 400 });
        }

        const url = `https://analyticsdata.googleapis.com/v1beta/properties/${propertyId}:runReport`;
        const body = {
            dateRanges: [
                {
                    startDate,
                    endDate,
                },
            ],
            metrics: metrics.map((metric: string) => ({ name: metric })),
            dimensions: dimensions?.map((dimension: string) => ({ name: dimension })),
        };

        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${process.env.GA4_ACCESS_TOKEN}`,
            },
            body: JSON.stringify(body),
        });

        if (!response.ok) {
            const error = await response.json();
            return NextResponse.json({ error }, { status: response.status });
        }

        const data = await response.json();
        return NextResponse.json(data);
    } catch (error) {
        console.error('Error fetching GA4 data:', error);
        return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
    }
}


